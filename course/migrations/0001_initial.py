# Generated by Django 4.0.2 on 2022-04-27 20:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text=(
                            "Designates that this user has all permissions without"
                            " explicitly assigning them."
                        ),
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text=(
                            "Required. 150 characters or fewer. Letters, digits and"
                            " @/./+/-/_ only."
                        ),
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text=(
                            "Designates whether the user can log into this admin site."
                        ),
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text=(
                            "Designates whether this user should be treated as active."
                            " Unselect this instead of deleting accounts."
                        ),
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, null=True, unique=True)),
                ("penn_id", models.IntegerField(null=True, unique=True)),
                ("canvas_id", models.IntegerField(null=True, unique=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text=(
                            "The groups this user belongs to. A user will get all"
                            " permissions granted to each of their groups."
                        ),
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="PageContent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("page", models.CharField(max_length=100)),
                ("content", models.TextField(max_length=4000)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="ScheduleType",
            fields=[
                (
                    "sched_type_code",
                    models.CharField(
                        max_length=255, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("sched_type_desc", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="School",
            fields=[
                ("school_desc_long", models.CharField(max_length=50, unique=True)),
                (
                    "school_code",
                    models.CharField(
                        max_length=10, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("visible", models.BooleanField(default=True)),
                ("canvas_sub_account_id", models.IntegerField(null=True)),
                (
                    "form_additional_enrollments",
                    models.BooleanField(
                        default=True, verbose_name="Additional Enrollments Form Field"
                    ),
                ),
            ],
            options={
                "ordering": ["school_desc_long"],
            },
        ),
        migrations.CreateModel(
            name="UpdateLog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("finished", models.DateTimeField(blank=True, null=True)),
                (
                    "process",
                    models.CharField(
                        choices=[("a", "A"), ("b", "B"), ("c", "C")], max_length=10
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Subject",
            fields=[
                ("subject_desc_long", models.CharField(max_length=255)),
                (
                    "subject_code",
                    models.CharField(
                        max_length=10, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("visible", models.BooleanField(default=True)),
                (
                    "schools",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subjects",
                        to="course.school",
                    ),
                ),
            ],
            options={
                "ordering": ["subject_desc_long"],
            },
        ),
        migrations.CreateModel(
            name="Notice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("header", models.CharField(max_length=100)),
                ("content", models.TextField(max_length=1000)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notices",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "get_latest_by": "updated_at",
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "course_code",
                    models.CharField(
                        editable=False,
                        max_length=150,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=250)),
                ("course_num", models.CharField(max_length=4)),
                ("section_num", models.CharField(max_length=4)),
                (
                    "term",
                    models.CharField(
                        choices=[("10", "Spring"), ("20", "Summer"), ("30", "Fall")],
                        max_length=2,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "primary_crosslist",
                    models.CharField(blank=True, default="", max_length=20),
                ),
                ("requested", models.BooleanField(default=False)),
                ("requested_override", models.BooleanField(default=False)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("year", models.CharField(max_length=4)),
                (
                    "crosslisted",
                    models.ManyToManyField(
                        blank=True, default=None, to="course.Course"
                    ),
                ),
                (
                    "instructors",
                    models.ManyToManyField(
                        blank=True, related_name="courses", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_at",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "primary_subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="course.subject"
                    ),
                ),
                (
                    "schedule_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="courses",
                        to="course.scheduletype",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="courses",
                        to="course.school",
                    ),
                ),
                (
                    "sections",
                    models.ManyToManyField(
                        blank=True, default=None, to="course.Course"
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="courses",
                        to="course.subject",
                    ),
                ),
            ],
            options={
                "ordering": ["-year", "course_code"],
            },
        ),
        migrations.CreateModel(
            name="CanvasCourse",
            fields=[
                (
                    "canvas_id",
                    models.IntegerField(
                        default=None, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(default=None, max_length=255)),
                (
                    "sis_course_id",
                    models.CharField(
                        blank=True, default=None, max_length=50, null=True
                    ),
                ),
                ("workflow_state", models.CharField(default=None, max_length=15)),
                (
                    "added_permissions",
                    models.ManyToManyField(
                        blank=True,
                        default=None,
                        related_name="added_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owners",
                    models.ManyToManyField(
                        blank=True,
                        related_name="canvas_sites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["canvas_id"],
            },
        ),
        migrations.CreateModel(
            name="AutoAdd",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("TA", "TA"),
                            ("INST", "Instructor"),
                            ("DES", "Designer"),
                            ("LIB", "Librarian"),
                            ("OBS", "Observer"),
                        ],
                        max_length=4,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="course.school"
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="course.subject"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("user__username",),
            },
        ),
        migrations.CreateModel(
            name="Request",
            fields=[
                (
                    "course_requested",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="course.course",
                    ),
                ),
                (
                    "copy_from_course",
                    models.IntegerField(blank=True, default=None, null=True),
                ),
                (
                    "title_override",
                    models.CharField(
                        blank=True, default=None, max_length=255, null=True
                    ),
                ),
                (
                    "lps_online",
                    models.BooleanField(default=False, verbose_name="LPS Online"),
                ),
                ("exclude_announcements", models.BooleanField(default=False)),
                (
                    "additional_instructions",
                    models.TextField(blank=True, default=None, null=True),
                ),
                (
                    "admin_additional_instructions",
                    models.TextField(blank=True, default=None, null=True),
                ),
                ("reserves", models.BooleanField(default=False)),
                ("process_notes", models.TextField(blank=True, default="")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("COMPLETED", "Completed"),
                            ("IN_PROCESS", "In Process"),
                            ("CANCELED", "Canceled"),
                            ("APPROVED", "Approved"),
                            ("SUBMITTED", "Submitted"),
                            ("LOCKED", "Locked"),
                        ],
                        default="SUBMITTED",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("masquerade", models.CharField(max_length=20, null=True)),
                (
                    "canvas_instance",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="canvas",
                        to="course.canvascourse",
                    ),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-status", "-created_at"),
            },
        ),
        migrations.AddField(
            model_name="course",
            name="crosslisted_request",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tied_course",
                to="course.request",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="multisection_request",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="additional_sections",
                to="course.request",
            ),
        ),
        migrations.AddField(
            model_name="canvascourse",
            name="request",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="course.request",
            ),
        ),
        migrations.CreateModel(
            name="AdditionalEnrollment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("TA", "TA"),
                            ("INST", "Instructor"),
                            ("DES", "Designer"),
                            ("LIB", "Librarian"),
                            ("OBS", "Observer"),
                        ],
                        default="TA",
                        max_length=4,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "course_request",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="additional_enrollments",
                        to="course.request",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RequestSummary",
            fields=[],
            options={
                "verbose_name_plural": "Requests summaries",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("course.request",),
        ),
    ]
